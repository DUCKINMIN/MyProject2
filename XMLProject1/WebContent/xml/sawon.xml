<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	1) XML
		1. 구분이 되어 있다. : Document, HTML(View)
		=> 문서형 데이터 베이스
		=> 운영체제의 호환성이 좋다.
		=> 모든 프로그램언어에서 같은 내용을 출력할 수 있다.
		=> XML
			# xml 구조
			# 문서 제작하는 방법
			# 변환
			# 언어(자바)에서 활용 : DOM, SAX(*****): XML Parser
							====,====
					메모리에 저장한 상태 ,한줄씩 읽어서 데이터 가지고 오다. 
			1. 구분이 되어있다. (반정형화 데이터)
				XML : 필요한 데이터 저장시에 <a>()</a> <a href="()">
					     위치 : 태그 사이, 속성 이냐?
				ML : 태그와 속성으로 만들어 진다.
					  태그 : 여는 태그<a>, 닫는 태그</a> , Empty 태그(단독태그)<input />
			2. XML : 태그는 지정된 것이 없다. (사용자 정의) => 시멘텍으로 제작 (알아보기 쉽게, 검색이 쉽게, 구분되게 만들어 놓는거, 최적화)
				1) XML 문법
					= 태그를 만들 경우
					 # 알파벳, 한글을 사용한다.
					 HTML : <A>=<a>, XML : <A>!=<a>, java: int A; int a;
					 # 숫자를 사용할 수 있다. : 단 앞에 사용 금지
					 <2aaa>(X) => <a2> <a3>(O)
					 # 특수문자 사용이 가능하다. : _, -, . , $ , :
					 	<c:forEach> <file_name> <file.size>
					 # 키워드(예약어)는 사용할 수 없다.
					 # 반드시 최상의 태그는 1개만 존재
					 	= 계층구조 : 전체 루트 태그
					 	= 열고 닫는 태그가 반드시 일치 (순서)
					 # 속성은 값을 지정할 때 반드시 "",''
					 	<table width=300>(X) / <table width="300">(O)
 -->
<sawon><!-- 최상위 테그를 table명이라함 -->
	<list><!-- Row(Record) -->
		<sabun>1</sabun><!-- Column -->
		<name>홍길동</name>
		<dept>개발부</dept>
		<sex>남자</sex>
		<age>26</age>
	</list>
	<list>
		<sabun>2</sabun>
		<name>심청이</name>
		<dept>개발부</dept>
		<sex>여자</sex>
		<age>26</age>
	</list>
	<list>
		<sabun>3</sabun>
		<name>박문수</name>
		<dept>개발부</dept>
		<sex>남자</sex>
		<age>29</age>
	</list>
	
</sawon>
 
 
 
 
 
 